#!/bin/bash
args=("$@")

# lowercase DD_LOG_LEVEL
DD_LOG_LEVEL=$(echo "$DD_LOG_LEVEL" | tr '[:upper:]' '[:lower:]')

if [ "$DD_EXPERIMENTAL_ENABLE_PROXY" == "true" ]
then
  if [ "$DD_LOG_LEVEL" == "debug" ]
  then
    echo "[bootstrap] DD_EXPERIMENTAL_ENABLE_PROXY is true"
    echo "[bootstrap] original AWS_LAMBDA_RUNTIME_API value is $AWS_LAMBDA_RUNTIME_API"
  fi

  export AWS_LAMBDA_RUNTIME_API="127.0.0.1:9000"

  if [ "$DD_LOG_LEVEL" == "debug" ]
  then
    echo "[bootstrap] rerouting AWS_LAMBDA_RUNTIME_API to $AWS_LAMBDA_RUNTIME_API"
  fi
fi

if [ "$DD_LOG_LEVEL" == "debug" ]
then
  echo "The runtime is $AWS_EXECUTION_ENV"
fi

# if it is .Net
if [[ "$AWS_EXECUTION_ENV" == *"dotnet"* ]]
then
  if [ "$DD_LOG_LEVEL" == "debug" ]
  then
    echo "Configuring for the .NET runtime!"
  fi
  # Handle the CORECLR_PROFILER_PATH
  DEFAULT_PATH=/opt/datadog/Datadog.Trace.ClrProfiler.Native.so
  ARM64_PATH=/opt/datadog/linux-arm64/Datadog.Trace.ClrProfiler.Native.so
  X64_PATH=/opt/datadog/linux-x64/Datadog.Trace.ClrProfiler.Native.so
  PROFILER_PATHS=("${DEFAULT_PATH}" "${ARM64_PATH}" "${X64_PATH}")
  PROFILER_FOUND=false
  ## Search from all possible places
  for PROFILER_PATH in "${PROFILER_PATHS[@]}"
  do
  if [ -f "$PROFILER_PATH" ]
  then
    export CORECLR_PROFILER_PATH="$PROFILER_PATH"
    PROFILER_FOUND=true
    break
  fi
  done
  if [ $PROFILER_FOUND == false ]
  then
    echo "CLR Profiler file not found. Function profiling may not work correctly"
  fi
  # Other env variables for .NET
  export CORECLR_ENABLE_PROFILING="1"
  export CORECLR_PROFILER="{846F5F1C-F9AE-4B07-969E-05C26BC060D8}"
  export DD_DOTNET_TRACER_HOME="/opt/datadog"
fi

# if it is java
if [[ "$AWS_EXECUTION_ENV" == *"java"* ]]
then
  if [ "$DD_LOG_LEVEL" == "debug" ]
  then
    echo "Configuring for the Java runtime!"
  fi
  export DD_JMXFETCH_ENABLED="false"
  export DD_RUNTIME_METRICS_ENABLED="false"
  export DD_REMOTE_CONFIG_ENABLED="false"

  DD_Agent_Jar=/opt/java/lib/dd-java-agent.jar
  if [ -f "$DD_Agent_Jar" ]
  then
    # Remove the -XX:-TieredCompilation flag from the java command passed through from the Lambda runtime.
    # The -XX:-TieredCompilation flag causes the JVM by default to optimize to the C2 compiler, which uses
    # more memory and is slower on cold start. Snapstarting doesn't improve performance in this case, because
    # compilation continues asynchronously in the background after the Lambda function has been frozen.
    # Instead we want to use the C1 compiler and Interpreter, which is faster on cold start and uses less memory.
    START_COMMAND=${args[0]}
    REMAINDER_ARGS=("${args[@]:1}")
    for index in "${!REMAINDER_ARGS[@]}" ; do
      [[ ${REMAINDER_ARGS[$index]} == "-XX:-TieredCompilation" ]] && unset -v 'REMAINDER_ARGS[$index]' ;
    done
    REMAINDER_ARGS="${REMAINDER_ARGS[@]}"
    args=($START_COMMAND -javaagent:$DD_Agent_Jar -XX:TieredStopAtLevel=1 ${REMAINDER_ARGS[@]})

  else
    echo "File $DD_Agent_Jar does not exist!"
  fi
fi

exec "${args[@]}"