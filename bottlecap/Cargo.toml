[package]
name = "bottlecap"
version = "0.1.0"
edition = "2024"
publish = false

[dependencies]
anyhow = { version = "1.0", default-features = false }
async-trait = { version = "0.1", default-features = false }
bytes = { version = "1.2", default-features = false }
chrono = { version = "0.4", features = ["serde", "std", "now"], default-features = false }
cookie = { version = "0.18", default-features = false }
figment = { version = "0.10", default-features = false, features = ["yaml", "env"] }
fnv = { version = "1.0", default-features = false }
hyper = { version = "1.6", default-features = false, features = ["server"] }
hyper-util = { version = "0.1.16", features = ["http1", "client", "client-legacy"] }
http-body = { version = "1", default-features = false }
http-body-util = { version = "0.1", default-features = false }
itertools = { version = "0.14", default-features = false, features = ["use_std"] }
lazy_static = { version = "1.5", default-features = false }
log = { version = "0.4", default-features = false }
mime = { version = "0.3", default-features = false }
multipart = { version = "0.18", default-features = false, features = ["server"] }
nix = { version = "0.26", default-features = false, features = ["feature", "fs"] }
ordered_hash_map = { version = "0.4", default-features = false }
regex = { version = "1.10", default-features = false }
reqwest = { version = "0.12.11", features = ["json", "http2"], default-features = false }
serde = { version = "1.0", default-features = false, features = ["derive"] }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
thiserror = { version = "1.0", default-features = false }
tokio = { version = "1.47", default-features = false, features = ["macros", "rt-multi-thread", "time"] }
tokio-util = { version = "0.7", default-features = false }
tracing = { version = "0.1", default-features = false }
tracing-core = { version = "0.1", default-features = false }
tracing-subscriber = { version = "0.3", default-features = false, features = ["std", "registry", "fmt", "env-filter", "tracing-log"] }
hmac = { version = "0.12", default-features = false }
sha2 = { version = "0.10", default-features = false }
hex = { version = "0.4", default-features = false, features = ["std"] }
base64 = { version = "0.22", default-features = false }
rustls = { version = "0.23.18", default-features = false, features = ["aws-lc-rs"] }
rand = { version = "0.8", default-features = false }
prost = { version = "0.13", default-features = false }
zstd = { version = "0.13.3", default-features = false }
futures = { version = "0.3.31", default-features = false }
serde-aux = { version = "4.7", default-features = false }
serde_html_form = { version = "0.2", default-features = false }
opentelemetry-proto = { version = "0.29", features = ["trace", "with-serde", "gen-tonic"] }
opentelemetry-semantic-conventions = { version = "0.30", features = ["semconv_experimental"] }
rustls-native-certs = { version = "0.8.1", optional = true }
axum = { version = "0.8.4", default-features = false, features = ["default"] }
ustr = { version = "1.0.0", default-features = false }
tower-http = { version = "0.6.6", default-features = false, features = ["limit"] }
# If you are adding or updating a datadog-owned code dependency, please ensure
# that it has a clippy.toml rule for disallowing the reqwest::Client::builder
# method in favor of our
# datadog_fips::reqwest_adapter::create_reqwest_client_builder. An example can
# be found in the clippy.toml file adjacent to this Cargo.toml.
datadog-protos = { version = "0.1.0", default-features = false, git = "https://github.com/DataDog/saluki/", rev = "c89b58e5784b985819baf11f13f7d35876741222"}
ddsketch-agent = { version = "0.1.0", default-features = false, git = "https://github.com/DataDog/saluki/", rev = "c89b58e5784b985819baf11f13f7d35876741222"}
ddcommon = { git = "https://github.com/DataDog/libdatadog", rev = "ba8955394cf35cf24a1a508fbe6264ad84702567" }
datadog-trace-protobuf = { git = "https://github.com/DataDog/libdatadog", rev = "ba8955394cf35cf24a1a508fbe6264ad84702567"  }
datadog-trace-utils = { git = "https://github.com/DataDog/libdatadog", rev = "ba8955394cf35cf24a1a508fbe6264ad84702567" , features = ["mini_agent"] }
datadog-trace-normalization = { git = "https://github.com/DataDog/libdatadog",  rev = "ba8955394cf35cf24a1a508fbe6264ad84702567" }
datadog-trace-obfuscation = { git = "https://github.com/DataDog/libdatadog", rev = "ba8955394cf35cf24a1a508fbe6264ad84702567"  }
datadog-trace-stats = { git = "https://github.com/DataDog/libdatadog", rev = "ba8955394cf35cf24a1a508fbe6264ad84702567"  }
dogstatsd = { git = "https://github.com/DataDog/serverless-components", rev = "936b3440a1ffc3dd68d040354b721a3042aad47d", default-features = false }
datadog-fips = { git = "https://github.com/DataDog/serverless-components", rev = "936b3440a1ffc3dd68d040354b721a3042aad47d", default-features = false }
libddwaf = { version = "1.28.1", git = "https://github.com/DataDog/libddwaf-rust", rev = "d1534a158d976bd4f747bf9fcc58e0712d2d17fc", default-features = false, features = ["serde"] }

[dev-dependencies]
figment = { version = "0.10", default-features = false, features = ["yaml", "env", "test"] }
proptest = "1.4"
httpmock = "0.7"
mock_instant = "0.6"
serial_test = "3.1"
tempfile = "3.20"

[build-dependencies]
# No external dependencies needed for the build script

[[bin]]
name = "bottlecap"

[profile.dev]
debug = true   # same as debuginfo=2 and no stripping
strip = false
opt-level = 0

[profile.release]
opt-level = "z"  # Optimize for size.
lto = true
codegen-units = 1
strip = true
panic = "abort"

[profile.release-alpine-arm64-fips]
strip = true
inherits = "release"
# Unfortunately opt-level "z" does not work for building aws-lc-fips-sys on
# Alpine for ARM with FIPS enabled.
opt-level = 3

[target.'cfg(not(target_env = "msvc"))'.dependencies]
tikv-jemallocator = "0.5"

[features]
default = ["reqwest/rustls-tls-native-roots", "dogstatsd/default", "datadog-fips/default" ]
fips = [
    "ddcommon/fips",
    "datadog-trace-utils/fips",
    "dogstatsd/fips",
    "datadog-fips/fips",
    "libddwaf/fips",
    "reqwest/rustls-tls-native-roots-no-provider",
    "rustls/fips",
    "rustls-native-certs",
]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage,coverage_nightly)'] }
