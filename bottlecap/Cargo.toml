[package]
name = "bottlecap"
version = "0.1.0"
edition = "2024"
publish = false

[dependencies]
async-trait = { version = "0.1", default-features = false }
aws_lambda_events = { version = "0.16", default-features = false, features = ["alb", "apigw", "cloudwatch_events", "cloudwatch_logs", "dynamodb", "eventbridge", "kinesis", "s3","sns", "sqs", "lambda_function_urls"] }
axum = { version = "0.8.4", default-features = false, features = ["default"] }
axum-extra = { version = "0.10.1", default-features = false, features = ["cookie"] }
bytes = { version = "1.2", default-features = false }
chrono = { version = "0.4", features = ["serde", "std", "now"], default-features = false }
figment = { version = "0.10", default-features = false, features = ["yaml", "env"] }
fnv = { version = "1.0", default-features = false }
hyper = { version = "1.6", default-features = false, features = ["server"] }
hyper-util = { version = "0.1.10", features = [
    "http1",
    "client",
    "client-legacy",
] }
http-body = "0.1"
http-body-util = "0.1"
mime = { version = "0.3", default-features = false }
lazy_static = { version = "1.5", default-features = false }
log = { version = "0.4", default-features = false }
multer = { version = "3.1", default-features = false }
nix = { version = "0.26", default-features = false, features = ["feature", "fs"] }
ordered_hash_map = { version = "0.4", default-features = false }
protobuf = { version = "3.5", default-features = false }
regex = { version = "1.10", default-features = false }
reqwest = { version = "0.12.11", features = ["json", "http2"], default-features = false }
serde = { version = "1.0", default-features = false, features = ["derive"] }
serde_html_form = { version = "0.2", default-features = false }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
thiserror = { version = "1.0", default-features = false }
tokio = { version = "1.37", default-features = false, features = ["macros", "rt-multi-thread"] }
tokio-util = { version = "0.7", default-features = false }
tracing = { version = "0.1", default-features = false }
tracing-core = { version = "0.1", default-features = false }
tracing-subscriber = { version = "0.3", default-features = false, features = ["std", "registry", "fmt", "env-filter", "tracing-log"] }
hmac = { version = "0.12", default-features = false }
sha2 = { version = "0.10", default-features = false }
hex = { version = "0.4", default-features = false, features = ["std"] }
base64 = { version = "0.22", default-features = false }
rmp-serde = { version = "1.3.0", default-features = false }
rustls = { version = "0.23.18", default-features = false, features = ["aws-lc-rs"] }
rand = { version = "0.8", default-features = false }
prost = { version = "0.13", default-features = false }
zstd = { version = "0.13.3", default-features = false }
futures = { version = "0.3.31", default-features = false }
serde-aux = { version = "4.7", default-features = false }
opentelemetry-proto = { version = "0.29", features = ["trace", "with-serde", "gen-tonic"] }
opentelemetry-semantic-conventions = { version = "0.29", features = ["semconv_experimental"] }
rustls-native-certs = { version = "0.8.1", optional = true }
# If you are adding or updating a datadog-owned code dependency, please ensure
# that it has a clippy.toml rule for disallowing the reqwest::Client::builder
# method in favor of our
# datadog_fips::reqwest_adapter::create_reqwest_client_builder. An example can
# be found in the clippy.toml file adjacent to this Cargo.toml.
datadog-protos = { version = "0.1.0", default-features = false, git = "https://github.com/DataDog/saluki/", rev = "c89b58e5784b985819baf11f13f7d35876741222" }
ddsketch-agent = { version = "0.1.0", default-features = false, git = "https://github.com/DataDog/saluki/" }
ddcommon = { git = "https://github.com/DataDog/libdatadog", rev = "8a49c7df2d9cbf05118bfd5b85772676f71b34f2" }
datadog-trace-protobuf = { git = "https://github.com/DataDog/libdatadog", rev = "8a49c7df2d9cbf05118bfd5b85772676f71b34f2"  }
datadog-trace-utils = { git = "https://github.com/DataDog/libdatadog", rev = "8a49c7df2d9cbf05118bfd5b85772676f71b34f2" , features = ["mini_agent"] }
datadog-trace-normalization = { git = "https://github.com/DataDog/libdatadog",  rev = "8a49c7df2d9cbf05118bfd5b85772676f71b34f2" }
datadog-trace-obfuscation = { git = "https://github.com/DataDog/libdatadog", rev = "8a49c7df2d9cbf05118bfd5b85772676f71b34f2"  }
dogstatsd = { git = "https://github.com/DataDog/serverless-components", rev = "d131de8419c191ce21c91bb30b5915c4d8a2cc5a", default-features = false }
datadog-trace-agent = { git = "https://github.com/DataDog/serverless-components", rev = "d131de8419c191ce21c91bb30b5915c4d8a2cc5a" }
datadog-fips = { git = "https://github.com/DataDog/serverless-components", rev = "d131de8419c191ce21c91bb30b5915c4d8a2cc5a", default-features = false }
libddwaf = { version = "1.25.1", git = "https://github.com/DataDog/libddwaf-rust", rev = "4fd675ad3717aace241c72b8748976bfa3ce4f74", default-features = false, features = ["default"] }

[dev-dependencies]
figment = { version = "0.10", default-features = false, features = ["yaml", "env", "test"] }
proptest = "1.4"
httpmock = "0.7"
mock_instant = "0.6"
serial_test = "3.1"
tempfile = "3.20"

[build-dependencies]
# No external dependencies needed for the build script

[[bin]]
name = "bottlecap"

[profile.release]
opt-level = "z"  # Optimize for size.
lto = true
codegen-units = 1

[profile.release-alpine-arm64-fips]
inherits = "release"
# Unfortunately opt-level "z" does not work for building aws-lc-fips-sys on
# Alpine for ARM with FIPS enabled.
opt-level = 3

[target.'cfg(not(target_env = "msvc"))'.dependencies]
tikv-jemallocator = "0.5"

[features]
default = ["reqwest/rustls-tls", "dogstatsd/default", "datadog-fips/default" ]
fips = [
    "ddcommon/fips",
    "datadog-trace-utils/fips",
    "dogstatsd/fips",
    "datadog-fips/fips",
    "libddwaf/fips",
    "reqwest/rustls-tls-native-roots-no-provider",
    "rustls/fips",
    "rustls-native-certs",
]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage,coverage_nightly)'] }

# libddwaf's bindgen uses `clang-sys` which by default dynamically opens `libclang.so`;
# however this is not supported on Alpine Linux (the usual musl target).
# Enabling the `static` feature of `bindgen`/`clang-sys` creates additional
# build requirements (`libLLVM.a`), which Alpine's `llvm-static` does not
# provide (it has its content presented as many `libLLVM*.a` files). Disabling
# statically linking to the C runtime alleviates this issue, but can result in
# `proc-macro` not being usable; which notably causes doc tests to fail with
# a big linker error.
[target.aarch64-unknown-linux-musl]
rustflags = ["-C", "target-feature=-crt-static"]
[target.x86_64-unknown-linux-musl]
rustflags = ["-C", "target-feature=-crt-static"]
