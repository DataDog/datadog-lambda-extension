variables:
  GIT_DEPTH: 1
  REGION_TO_DEPLOY:
    description: "use sa-east-1 for dev, us-east-1 for RC, all for all regions"
    value: sa-east-1
  AGENT_BRANCH:
    description: "datadog-agent branch you want to release"
    value: main
  LAYER_SUFFIX:
    description: "Suffix to be appended to the layer name (default empty)"
    value: ""

image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:20.10-py3

stages:
  - build_tools_if_needed
  - build_layer
  - prepare_multi_region
  - trigger

build_tools:
  stage: build_tools_if_needed
  variables:
    CI_ENABLE_CONTAINER_IMAGE_BUILDS: "true"
    TARGET: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-lambda-extension
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - changes:
      - build-tools/**/*
  tags: ["runner:docker"]
  script:
    - cd build-tools && docker buildx build --tag ${TARGET} --push .

build_and_deploy_layer:
  stage: build_layer
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    CI_ENABLE_CONTAINER_IMAGE_BUILDS: "true"
    ROLE_TO_ASSUME: arn:aws:iam::425362996713:role/sandbox-layer-deployer
    TARGET: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-lambda-extension
  tags: ["runner:docker"]
  script:
    - mkdir tmp
    - git clone --branch ${AGENT_BRANCH} --depth=1 https://github.com/DataDog/datadog-agent.git
    - dockerId=$(docker create --platform linux/amd64 ${TARGET})
    - docker cp $dockerId:/build_tools .
    - EXTERNAL_ID=$(aws ssm get-parameter 
      --region us-east-1 
      --name ci.datadog-lambda-extension.externalid 
      --with-decryption 
      --query "Parameter.Value" 
      --out text)

    # build
    - ./build_tools
      build
      --version 1
      --agent-version 1
      --architecture amd64
      --context-path .
      --destination-path tmp/serverless
      --docker-path "scripts_v2/Dockerfile.build"
      --artifact-name "datadog_extension.zip"

    # sign
    - jobId=$(./build_tools
      sign 
      --layer-path tmp/serverless/datadog_extension.zip 
      --assume-role "$ROLE_TO_ASSUME"
      --external-id "$EXTERNAL_ID")

    - echo "signing jobId is = $jobId"
    - echo $jobId > tmp/serverless/jobId

prepare_multi_region:
  stage: prepare_multi_region
  tags: ["runner:docker"]
  artifacts:
    paths:
      - trigger_region.yaml
      - tmp/serverless/jobId
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "external"
    - if: $CI_PIPELINE_SOURCE == "trigger"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
  variables:
    TARGET: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-lambda-extension
    ROLE_TO_ASSUME: arn:aws:iam::425362996713:role/sandbox-layer-deployer
  script:
    - echo $CI_PIPELINE_SOURCE
    - EXTERNAL_ID=$(aws ssm get-parameter
        --region us-east-1
        --name ci.datadog-lambda-extension.externalid
        --with-decryption
        --query "Parameter.Value"
        --out text)
    - dockerId=$(docker create --platform linux/amd64 ${TARGET})
    - docker cp $dockerId:/build_tools .
    - regions=$(./build_tools list_region --assume-role "$ROLE_TO_ASSUME" --external-id "$EXTERNAL_ID")
    - if [ "${REGION_TO_DEPLOY}" != "all" ]; then regions=$REGION_TO_DEPLOY; fi
    - jobId=$(cat tmp/serverless/jobId)
    - echo "job id = $jobId"
    - sed "s/xxx_layer_sufix_xxx/${LAYER_SUFFIX}/" trigger_region.orig.yaml > trigger_region.tmp.yaml
    - sed "s/xxx_aws_regions_xxx/${regions}/" trigger_region.tmp.yaml > trigger_region.tmp2.yaml
    - sed "s/xxx_jobId_xxx/${jobId}/" trigger_region.tmp2.yaml > trigger_region.yaml
    - cat trigger_region.yaml

multi_region:
  rules:
    - if: $REGION_TO_DEPLOY != ""
  stage: trigger
  trigger:
    include:
      - artifact: trigger_region.yaml
        job: prepare_multi_region