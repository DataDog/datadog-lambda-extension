name: Bottlecap (Rust)

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PB_VERSION: 25.3
  PB_URL: https://github.com/protocolbuffers/protobuf/releases/download
  PB_TARGET: linux-x86_64

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: "0"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      # Install protobuf compiler for linux. The versions bundled with Ubuntu
      # 20.04 and 22.04 are too old -- our messages require protobuf >= 3.15 --
      # so we need to download a protoc binary instead.
      - run: sudo apt-get update
      - run: sudo apt-get install -y curl unzip cmake
      - name: Install protobuf ${{ env.PB_VERSION }} compiler from binary for ${{ env.PB_TARGET }}
        run: |
          curl -LO "${{ env.PB_URL }}/v${{ env.PB_VERSION }}/protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip"
          unzip "protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip" -d "$HOME/.local"
          export PATH="$PATH:$HOME/.local/bin"

      - uses: actions-rust-lang/setup-rust-toolchain@v1.13.0
        with:
          cache: false
      - uses: mozilla-actions/sccache-action@v0.0.9
      - working-directory: bottlecap
        run: cargo check --workspace

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: "0"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      # Install protobuf compiler for linux. The versions bundled with Ubuntu
      # 20.04 and 22.04 are too old -- our messages require protobuf >= 3.15 --
      # so we need to download a protoc binary instead.
      - run: sudo apt-get update
      - run: sudo apt-get install -y curl unzip cmake
      - name: Install protobuf ${{ env.PB_VERSION }} compiler from binary for ${{ env.PB_TARGET }}
        run: |
          curl -LO "${{ env.PB_URL }}/v${{ env.PB_VERSION }}/protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip"
          unzip "protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip" -d "$HOME/.local"
          export PATH="$PATH:$HOME/.local/bin"

      - uses: actions-rust-lang/setup-rust-toolchain@v1.13.0
        with:
          components: clippy
          cache: false
      - uses: mozilla-actions/sccache-action@v0.0.9
      # We need to do these separately because the fips feature is incompatible with the default feature.
      - working-directory: bottlecap
        run: cargo clippy --workspace --all-targets --features default
      - working-directory: bottlecap
        run: cargo clippy --workspace --all-targets --no-default-features --features fips

  build-all:
    name: Build All
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: "0"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      # Install protobuf compiler for linux. The versions bundled with Ubuntu
      # 20.04 and 22.04 are too old -- our messages require protobuf >= 3.15 --
      # so we need to download a protoc binary instead.
      - run: sudo apt-get update
      - run: sudo apt-get install -y curl unzip cmake
      - name: Install protobuf ${{ env.PB_VERSION }} compiler from binary for ${{ env.PB_TARGET }}
        run: |
          curl -LO "${{ env.PB_URL }}/v${{ env.PB_VERSION }}/protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip"
          unzip "protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip" -d "$HOME/.local"
          export PATH="$PATH:$HOME/.local/bin"

      - uses: actions-rust-lang/setup-rust-toolchain@v1.13.0
        with:
          cache: false
      - uses: mozilla-actions/sccache-action@v0.0.9
      - working-directory: bottlecap
        run: cargo build --all

  test:
    name: Test Suite
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: "0"
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      # Install protobuf compiler for linux. The versions bundled with Ubuntu
      # 20.04 and 22.04 are too old -- our messages require protobuf >= 3.15 --
      # so we need to download a protoc binary instead.
      - run: sudo apt-get update
      - run: sudo apt-get install -y curl unzip cmake
      - name: Install protobuf ${{ env.PB_VERSION }} compiler from binary for ${{ env.PB_TARGET }}
        run: |
          curl -LO "${{ env.PB_URL }}/v${{ env.PB_VERSION }}/protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip"
          unzip "protoc-${{ env.PB_VERSION }}-${{ env.PB_TARGET }}.zip" -d "$HOME/.local"
          export PATH="$PATH:$HOME/.local/bin"

      - uses: actions-rust-lang/setup-rust-toolchain@v1.13.0
        with:
          cache: false
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest@0.9
      - uses: mozilla-actions/sccache-action@v0.0.9
      - working-directory: bottlecap
        run: cargo nextest run --workspace

  format:
    name: Format
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1.13.0
        with:
          components: rustfmt
          cache: false
      - working-directory: bottlecap
        run: cargo fmt --all -- --check

  # If this fails, run `dd-rust-license-tool write` in bottlecap/
  license-3rdparty:
    runs-on: ubuntu-22.04
    name: "Valid LICENSE-3rdparty.csv"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - run: cargo install dd-rust-license-tool --locked
      - run: dd-rust-license-tool check
        working-directory: bottlecap

  layers:
    name: Build Preview Bottlecap Layers (${{ matrix.arch }}${{ matrix.alpine && '-alpine' || '' }}${{ matrix.fips && '-fips' || ''}})
    strategy:
      matrix:
        alpine: [true, false]
        arch: [arm64, amd64]
        fips: [true, false]
    runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-latest' || 'ubuntu-22.04-arm' }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      # Install protobuf compiler for linux. The versions bundled with Ubuntu
      # 20.04 and 22.04 are too old -- our messages require protobuf >= 3.15 --
      # so we need to download a protoc binary instead.
      - name: Build Layer
        run: ./scripts/build_bottlecap_layer.sh
        env:
          ALPINE: ${{ matrix.alpine && '1' || '0' }}
          FIPS: ${{ matrix.fips && '1' || '0' }}
          ARCHITECTURE: ${{ matrix.arch }}
          PROFILE: dev
          # Overriding base images as registry.ddbuild.io is not reachable from GitHub Actions
          ALPINE_IMAGE: alpine@sha256:8a1f59ffb675680d47db6337b49d22281a139e9d709335b492be023728e11715 # 3.22.0
          UBUNTU_IMAGE: ubuntu@sha256:9a0bdde4188b896a372804be2384015e90e3f84906b750c1a53539b585fbbe7f # 22.04
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: layer-${{ matrix.arch }}${{ matrix.alpine && '-alpine' || '' }}${{ matrix.fips && '-fips' || ''}}
          path: .layers/datadog_extension-${{ matrix.arch }}.zip
          if-no-files-found: error
