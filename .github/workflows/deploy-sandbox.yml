name: Deploy Sandbox

on:
  workflow_dispatch:
    inputs:
      mfaCode:
        type: string
        description: MFA Code
        required: true
      architecture:
        description: 'Architecture'
        required: true
        default: 'amd64' 
        type: choice
        options:
        - amd64
        - arm64
      agentBranch:
        type: string
        description: datadog agent branch name (default main)
        default: "main"
      layerSuffix:
        type: string
        description: suffix to be appended to the layer name (default empty)
        default: ""

jobs:
  prepare-artifact:
    runs-on: ubuntu-latest
    outputs:
      AWS_REGIONS: ${{ steps.list_region.outputs.AWS_REGIONS }}
      AWS_ACCESS_KEY_ID: ${{ steps.auth.outputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.auth.outputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ steps.auth.outputs.AWS_SESSION_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - id: auth
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.GH_ACTION_PUBLISHER_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_ACTION_PUBLISHER_AWS_SECRET_ACCESS_KEY }}
          RUST_BACKTRACE: 1
        run: |
          ./build-tools/bin/build_tools \
          auth \
          --mfa-arn ${{ secrets.GH_ACTION_PUBLISHER_MFA_DEVICE_ARN }} \
          --mfa-code ${{ inputs.mfaCode }} \
          --key ${{ secrets.GH_ACTION_PUBLISHER_AEM_KEY }}
      - name: Add mask
        run: |
          echo "::add-mask::${{ env.AWS_ACCESS_KEY_ID }}" 
          echo "::add-mask::${{ env.AWS_SECRET_ACCESS_KEY }}" 
          echo "::add-mask::${{ env.AWS_SESSION_TOKEN }}" 
      # - uses: actions/checkout@v3
      #   with:
      #     repository: DataDog/datadog-agent
      #     ref: refs/heads/${{ inputs.agentBranch }}
      #     path: datadog-agent
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2.1.0
      # - run: |
      #    ./build-tools/bin/build_tools \
      #    build \
      #    --version 1 \
      #    --agent-version 1 \
      #    --architecture "${{ inputs.architecture }}" \
      #    --context-path "${GITHUB_WORKSPACE}" \
      #    --destination-path "${GITHUB_WORKSPACE}/tmp" \
      #    --docker-path "scripts_v2/Dockerfile.build" \
      #    --artifact-name "datadog_extension.zip"
      # - name: Sign the layer
      #   run: |
      #    ./build-tools/bin/build_tools \
      #    sign \
      #    --layer-path ./tmp/datadog_extension.zip \
      #    --destination-path ./tmp/datadog_extension_signed.zip
      # - uses: actions/upload-artifact@v3.1.1
      #   with:
      #     name: datadog-extension
      #     path: ./tmp/datadog_extension_signed.zip
      #     retention-days: 5
      - id: list_region
        name: Build list of regions
        run: |
         ./build-tools/bin/build_tools \
         list_region
      # - id: deploy
      #   run: |
      #     ./build-tools/bin/build_tools \
      #     deploy \
      #     --layer-path ./tmp/datadog_extension_signed.zip \
      #     --architecture "${{ inputs.architecture }}" \
      #     --layer-name "Datadog-Extension" \
      #     --layer-suffix "${{ inputs.layerSuffix }}" \
      #     --region sa-east-1

  deploy-artifact:
    needs: 
      - prepare-artifact
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     aws_region: ${{ fromJson(needs.prepare-artifact.outputs.AWS_REGIONS) }}
    steps:
      - uses: actions/checkout@v3
      - id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.prepare-artifact.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.prepare-artifact.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ needs.prepare-artifact.outputs.AWS_SESSION_TOKEN }}
        run: |
          ./build-tools/bin/build_tools \
          deploy \
          --layer-path ./tmp/datadog_extension_signed.zip \
          --architecture "${{ inputs.architecture }}" \
          --layer-name "Datadog-Extension" \
          --layer-suffix "${{ inputs.layerSuffix }}" \
          --region sa-east-1 \
          --key ${{ secrets.GH_ACTION_PUBLISHER_AEM_KEY }} \
          --encrypted-credentials
