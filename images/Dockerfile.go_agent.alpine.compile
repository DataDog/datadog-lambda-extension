FROM registry.ddbuild.io/images/mirror/alpine:3.16 AS compiler
ARG EXTENSION_VERSION
ARG AGENT_VERSION
ARG BUILD_TAGS
ARG CGO_ENABLED
ARG GOEXPERIMENT
ARG FIPS

# Install dependencies
RUN apk add --no-cache git make musl-dev gcc

# NOTE: the version of go specifed here is used to get the base go tooling for
# our builds. The actual version that we use for building the agent is the one
# listed in the agen't go.work files. The go we install here will download the
# appropriate version  specified in the go.work file before running go commands
# for the agent.
COPY --from=registry.ddbuild.io/images/mirror/golang:1.24.6-alpine /usr/local/go/ /usr/lib/go

ENV GOROOT=/usr/lib/go
ENV GOPATH=/go
ENV PATH=/go/bin:$PATH

RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin
RUN mkdir -p /tmp/dd/datadog-agent

# Copy cached dependencies
COPY ./scripts/.cache/go.mod /tmp/dd/datadog-agent
COPY ./scripts/.cache/go.sum /tmp/dd/datadog-agent
WORKDIR /tmp/dd/datadog-agent

# Add and unzip agent tarball
ADD ./scripts/.src/datadog-agent.tgz /tmp/dd

# Build the Serverless Go Agent
#
# Sets the `EXTENSION_VERSION` to the serverless tags.
# Also sets the `AGENT_VERSION` to the version of the agent.
WORKDIR /tmp/dd/datadog-agent/cmd/serverless

RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    if [ "$FIPS" = "1" ]; then \
        export CGO_ENABLED=1; \
        export GOEXPERIMENT=boringcrypto; \
    fi; \
    echo CGO_ENABLED=$CGO_ENABLED; \
    echo GOEXPERIMENT=$GOEXPERIMENT; \
    if [ -z "$AGENT_VERSION" ]; then \
        /usr/lib/go/bin/go build -ldflags="-w -extldflags '-static' \
        -X github.com/DataDog/datadog-agent/pkg/serverless/tags.currentExtensionVersion=$EXTENSION_VERSION" \
        -tags "${BUILD_TAGS}" -o datadog-agent; \
    else \
        /usr/lib/go/bin/go build -ldflags="-w  -extldflags '-static' \
        -X github.com/DataDog/datadog-agent/pkg/serverless/tags.currentExtensionVersion=$EXTENSION_VERSION \
        -X github.com/DataDog/datadog-agent/pkg/version.agentVersionDefault=$AGENT_VERSION" \
        -tags "${BUILD_TAGS}" -o datadog-agent; \
    fi

# Ensure that the `agentVersionDefault` variable exists in the binary.
RUN /usr/lib/go/bin/go tool nm datadog-agent | grep -w 'github.com/DataDog/datadog-agent/pkg/version.agentVersionDefault' || \
    (echo "agentVersionDefault variable doesn't exist" && exit 1)

RUN if [ "$FIPS" = "1" ]; then \
        /usr/lib/go/bin/go tool nm datadog-agent | grep -i 'crypto/internal/boring/sig.FIPSOnly' || \
        (echo "boringcrypto not enabled" && exit 1); \
    else \
        /usr/lib/go/bin/go tool nm datadog-agent | grep -i 'crypto/internal/boring/sig.FIPSOnly'; \
        if [ $? -eq 0 ]; then \
            echo "boringcrypto incorrectly enabled"; \
            exit 1; \
        fi; \
    fi

# Strip the binary to reduce size
RUN strip datadog-agent

# Use the smallest image possible
FROM scratch
COPY --from=compiler /tmp/dd/datadog-agent/cmd/serverless/datadog-agent /
ENTRYPOINT ["/datadog-agent"]
