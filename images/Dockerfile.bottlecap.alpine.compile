ARG ALPINE_IMAGE=registry.ddbuild.io/images/mirror/alpine:3.22.0

FROM ${ALPINE_IMAGE} AS compiler
ARG PLATFORM
ARG PROFILE="release"
ARG FIPS

# Install dependencies
RUN apk add --no-cache bash build-base clang-libclang cmake curl go \
    linux-headers perl unzip

SHELL ["/bin/bash", "-c"]

# Install Protocol Buffers, from package instead of manually
RUN apk add --no-cache protoc

# Install Rust Toolchain
RUN --mount=type=bind,source=.,target=/tmp/dd \
    set -euo pipefail && \
    version=$(grep 'channel =' < /tmp/dd/rust-toolchain.toml | tr -d ' ' | cut -d '=' -f 2 | tr -d '"') && \
    curl https://sh.rustup.rs -sSf | \
        sh -s -- --profile minimal \
                 --default-host "${PLATFORM}-unknown-linux-musl" \
                 --default-toolchain "${version}-${PLATFORM}-unknown-linux-musl" \
                 --component rust-src \
                 -y
ENV PATH="${PATH}:/root/.cargo/bin"

# Build the binary
ENV RUSTFLAGS="-Cpanic=abort"
# Added -Ctarget-feature=-crt-static for alpine: the default MUSL target is
# configured to produce fully static binaries, hence incapable of dynamically
# loading libraries. The libddwaf crate uses `bindgen` which by default
# dynamically loads `libclang`, and the `static` feature is tricky to get
# working on alpine due to how it packages the static version of libLLVM.
ENV RUSTFLAGS="${RUSTFLAGS} -Ctarget-feature=-crt-static"

WORKDIR /tmp/dd/bottlecap
RUN --mount=type=cache,target=/root/.cargo/git \
    --mount=type=cache,target=/root/.cargo/registry \
    --mount=type=bind,source=.,target=/tmp/dd,rw \
    --mount=type=cache,target=/tmp/dd/bottlecap/target \
    if [ "${PROFILE}" == "dev" ]; then \
        export PROFILE_OUT="debug"; \
    else \
        export PROFILE_OUT="${PROFILE}"; \
    fi; \
    if [ "${FIPS}" = "1" ]; then \
        export FEATURES=fips; \
        if [ "${PLATFORM}" = "aarch64" ] && [ "${PROFILE}" == "release" ]; then \
            export PROFILE="release-alpine-arm64-fips"; \
        fi \
    else \
        export FEATURES=default; \
    fi; \
    # Explicitly NOT passing `--target` as this makes the `RUSTFLAGS` (from any
    # source) not apply to `build.rs` compilation, which in turns means
    # `libddwaf`'s builder fails to build because on MUSL platforms it can only
    # work with `-Ctarget-feature=-crt-runtime` being specified. There is
    # currently no way to set `RUSTFLAGS` for `build.rs` compilation if
    # `--target` is passed (see: https://github.com/rust-lang/cargo/issues/4423).
    cargo +stable build --verbose --locked --no-default-features \
        --features="${FEATURES}" \
        --profile="${PROFILE}" && \
    mkdir -p /tmp/out && \
    cp "/tmp/dd/bottlecap/target/${PROFILE_OUT}/bottlecap" /tmp/out/bottlecap

# Use the smallest image possible
FROM scratch
COPY --from=compiler /tmp/out/bottlecap /
ENTRYPOINT ["/bottlecap"]

