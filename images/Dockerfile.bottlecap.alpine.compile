FROM registry.ddbuild.io/images/mirror/alpine:3.22.0 AS compiler
ARG PLATFORM

ARG FIPS

# Install dependencies
RUN apk add --no-cache bash build-base clang clang-libclang compiler-rt cmake \
                       curl go linux-headers perl unzip

SHELL ["/bin/bash", "-c"]

# Install Protocol Buffers, from package instead of manually
RUN apk add --no-cache protoc

# Install Rust Toolchain
RUN set -euo pipefail && \
    curl https://sh.rustup.rs -sSf | \
        sh -s -- --profile minimal \
                 --default-host "${PLATFORM}-unknown-linux-musl" \
                 --default-toolchain "stable-${PLATFORM}-unknown-linux-musl" \
                 --component rust-src \
                 -y
ENV PATH="${PATH}:/root/.cargo/bin"

# Build the binary
ENV RUSTFLAGS="-Cpanic=abort"

WORKDIR /tmp/dd/bottlecap
RUN --mount=type=cache,target=/root/.cargo/git \
    --mount=type=cache,target=/root/.cargo/registry \
    --mount=type=bind,source=.,target=/tmp/dd,rw \
    --mount=type=cache,target=/tmp/dd/bottlecap/target \
    if [ "${FIPS}" = "1" ]; then \
        export FEATURES=fips; \
        if [ "${PLATFORM}" = "aarch64" ]; then \
            export PROFILE="release-alpine-arm64-fips"; \
        fi \
    else \
        export FEATURES=default; \
    fi; \
    if [ "${PLATFORM}" = "x86_64" ]; then \
        # The `libddwaf` crate links against static objects that require `libclang_rt.builtins`, but
        # this is not presented to the linker by default on this platform, so we force it in.
        export RUSTFLAGS="${RUSTFLAGS:-} -Clinker=clang -L$(dirname $(clang --print-file-name="libclang_rt.builtins-$(uname -m).a")) -lclang_rt.builtins-$(uname -m)"; \
    fi; \
    # We use a wrapper to allow `libddwaf-sys`' build.rs to be compiled with
    # -Ctarget-feature=-crt-static so that it is capable of dynamically loading
    # libclang; while still building bottlecap with a static CRT.
    RUSTC_WRAPPER=/tmp/dd/.cargo/musl.rustc-wrapper \
    cargo +stable build --verbose --locked --no-default-features \
        --features="${FEATURES}" \
        --profile="${PROFILE:-release}" && \
    mkdir -p /tmp/out && \
    cp "/tmp/dd/bottlecap/target/${PROFILE:-release}/bottlecap" /tmp/out/bottlecap

# Use the smallest image possible
FROM scratch
COPY --from=compiler /tmp/out/bottlecap /
ENTRYPOINT ["/bottlecap"]

