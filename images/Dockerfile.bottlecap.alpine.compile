FROM registry.ddbuild.io/images/mirror/alpine:3.22.0 AS compiler
ARG PLATFORM

ARG FIPS

# Install dependencies
RUN apk add --no-cache curl gcc build-base make unzip bash \
    autoconf automake libtool g++ perl go cmake linux-headers \
    clang-libclang

SHELL ["/bin/bash", "-c"]

# Install Protocol Buffers, from package instead of manually
RUN apk add --no-cache protoc

# Install Rust Toolchain
RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- --profile minimal --default-toolchain stable-$PLATFORM-unknown-linux-musl -y
ENV PATH=/root/.cargo/bin:$PATH
RUN rustup component add rust-src --toolchain stable-$PLATFORM-unknown-linux-musl

# Copy source code
RUN mkdir -p /tmp/dd
COPY ./bottlecap/src /tmp/dd/bottlecap/src
COPY ./bottlecap/build.rs /tmp/dd/bottlecap/build.rs
COPY ./bottlecap/Cargo.toml /tmp/dd/bottlecap/Cargo.toml
COPY ./bottlecap/Cargo.lock /tmp/dd/bottlecap/Cargo.lock

# Build the binary
#
# Added `-C link-arg=-lgcc` and `-Ctarget-feature=-crt-static` for alpine, as otherwise `bindgen` is
# unable to load `libclang` dynamically (on `musl`, the C runtime is static by default, and that
# makes it incapable of dynamically loading libraries - static-linking `libclang` would be possible
# if it was not such a pain to build in that case).
ENV RUSTFLAGS="-Cpanic=abort -Clink-arg=-lgcc -Ctarget-feature=-crt-static"

WORKDIR /tmp/dd/bottlecap
RUN --mount=type=cache,target=/root/.cargo/git \
    --mount=type=cache,target=/root/.cargo/registry \
    export PROFILE="release"; \
    if [ "$FIPS" = "1" ]; then \
        export FEATURES=fips; \
        if [ "$PLATFORM" = "aarch64" ]; then \
            export PROFILE="release-alpine-arm64-fips"; \
        fi \
    else \
        export FEATURES=default; \
    fi; \
    env; \
    # Explicitly NOT passing `--target` as this makes the `RUSTFLAGS` (from any source) not apply to `build.rs`
    # compilation, which in turns means `libddwaf`'s builder fails to build because on MUSL platforms it can only work
    # with `-Ctarget-feature=-crt-runtime` being specified. There is currently no way to set `RUSTFLAGS` for `build.rs`
    # compilation if `--target` is passed (see: https://github.com/rust-lang/cargo/issues/4423).
    cargo +stable build --verbose --no-default-features --features $FEATURES --profile $PROFILE; \
    cp /tmp/dd/bottlecap/target/$PROFILE/bottlecap /tmp/dd/bottlecap/bottlecap

# Use the smallest image possible
FROM scratch
COPY --from=compiler /tmp/dd/bottlecap/bottlecap /
ENTRYPOINT ["/bottlecap"]

