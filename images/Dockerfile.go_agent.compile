FROM public.ecr.aws/lambda/provided:al2 AS compiler
ARG EXTENSION_VERSION
ARG AGENT_VERSION
ARG BUILD_TAGS
ARG FIPS

ENV CGO_ENABLED=${FIPS:+1}
ENV GOEXPERIMENT=${FIPS:+boringcrypto}

RUN mkdir -p /tmp/dd/datadog-agent

# Install dependencies
RUN yum install -y wget tar gzip gcc
RUN arch="$(uname -m)"; \
    if [ "${arch}" = 'aarch64' ]; then \
    arch='arm64'; \
    fi; \
    if [ "${arch}" = 'x86_64' ]; then \
    arch='amd64'; \
    fi; \
    wget -O go1.23.6.linux-${arch}.tar.gz https://go.dev/dl/go1.23.6.linux-${arch}.tar.gz; \
    tar -C /usr/local -xzf go1.23.6.linux-${arch}.tar.gz

# Copy cached dependencies
COPY ./scripts/.cache/go.mod /tmp/dd/datadog-agent
COPY ./scripts/.cache/go.sum /tmp/dd/datadog-agent
WORKDIR /tmp/dd/datadog-agent

# Add and unzip agent tarball
ADD ./scripts/.src/datadog-agent.tgz /tmp/dd

# Build the Serverless Go Agent
#
# Sets the `EXTENSION_VERSION` to the serverless tags.
# Also sets the `AGENT_VERSION` to the version of the agent.
WORKDIR /tmp/dd/datadog-agent/cmd/serverless

RUN --mount=type=cache,target=/root/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    if [ -z "$AGENT_VERSION" ]; then \
        /usr/local/go/bin/go build -ldflags="-w \
        -X github.com/DataDog/datadog-agent/pkg/serverless/tags.currentExtensionVersion=$EXTENSION_VERSION" \
        -tags "${BUILD_TAGS}" -o datadog-agent; \
    else \
        /usr/local/go/bin/go build -ldflags="-w \
        -X github.com/DataDog/datadog-agent/pkg/serverless/tags.currentExtensionVersion=$EXTENSION_VERSION \
        -X github.com/DataDog/datadog-agent/pkg/version.agentVersionDefault=$AGENT_VERSION" \
        -tags "${BUILD_TAGS}" -o datadog-agent; \
    fi

# Ensure that the `agentVersionDefault` variable exists in the binary.
RUN /usr/local/go/bin/go tool nm datadog-agent | grep -w 'github.com/DataDog/datadog-agent/pkg/version.agentVersionDefault' || \
    (echo "agentVersionDefault variable doesn't exist" && exit 1)

RUN if [ "$FIPS" = "1" ]; then \
        /usr/local/go/bin/go tool nm datadog-agent | grep -i 'crypto/internal/boring/sig.FIPSOnly' || \
        (echo "boringcrypto not enabled" && exit 1); \
    else \
        /usr/local/go/bin/go tool nm datadog-agent | grep -i 'crypto/internal/boring/sig.FIPSOnly'; \
        if [ $? -eq 0 ]; then \
            echo "boringcrypto incorrectly enabled"; \
            exit 1; \
        fi; \
    fi

# Strip the binary to reduce size
RUN strip datadog-agent

# Use the smallest image possible
FROM scratch
COPY --from=compiler /tmp/dd/datadog-agent/cmd/serverless/datadog-agent /
ENTRYPOINT ["/datadog-agent"]
